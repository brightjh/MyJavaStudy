<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.brightzm.mapper.BrandMapper">
    <!-- namespace 名称空间-->


    <!-- 数据库字段名称 和 实体类的属性名称不一样，不能自动封装数据
        * 起别名:对不一样的列名起别名，让别名和实体类的属性名一样
        缺点： 每次查询都要定义一次别名,可以定义sql片段但不灵活

        *resultMap:
        1.定义resultMap标签
        2.select标签中 使用resultMap属性替换 resultType的属性
    -->

    <!--
    id:唯一属性
    type:映射类型，支持别名方式
    -->

    <resultMap id="brandResultMap" type="brand">

        <!--
            id：完成主键字段映射
               column:表的列名
               property:实体类的属性名
            result：完成一般字段的映射
                column：表的列名
                property:实体类的属性名
        -->

        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>

    </resultMap>


    <!--    查询所有-->
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

    <!--    根据id查询-->
    <!-- 占位符
        #{} 将其替换为？ 防止sql注入
        ?{} 拼sql语句，存在sql注入问题

        * 参数类型 parameterType 不常用
        * 特殊字符 例如 < 有小于号和xml标签开始两种含义
            1.转义字符  字符少的时候可以使用
            2.CDATA区域 字符多的时候使用

    -->
    <!--<select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id
        <![CDATA[
        <
        ]]>
         #{id};
    </select>-->

    <!--<select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like #{companyName}
          and brand_name like #{brandName}
    </select>
-->

    <!--动态条件查询-->
    <!--if标签
       问题：如果第一个不符合条件，下一个sql语句会出错，可以使用where标签
       -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select * from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != '' ">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != '' ">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>


    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select * from tb_brand
        <where>
            <choose> <!-- 相当于switch -->
                <when test="status != null"><!-- 相当于case -->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != '' "> <!-- 相当于case -->
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != '' "> <!-- 相当于case -->
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>


    <!--<select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id &lt; #{id};
    </select>-->


    <!-- sql片段 -->
    <!--<sql id="brand_column">
        id, brand_name as brandName, company_name as companyName, ordered, description, status
    </sql>-->

    <!--<select id="selectAll" resultType="brand">
        select
           <include refid="brand_column" />&ndash;&gt;
        from tb_brand;
    </select>-->

    <!--<select id="selectAll" resultType="brand">
        select *
        from tb_brand;
    </select>-->

    <!--添加品牌
    配置主键返回
    -->
    <insert id="addAll" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        VALUES (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status})
    </insert>

    <!--    修改所有字段-->
    <update id="updateAll">
        update tb_brand
        set brand_name   = #{brandName},
            company_name = #{companyName},
            ordered      = #{ordered},
            description  = #{description},
            status       = #{status}
        where id = #{id};
    </update>

    <!--   修改部分字段-->
    <update id="updateByCondition">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != '' ">
                brand_name = #{brandName}
            </if>
            <if test="companyName != null and companyName != '' ">
                company_name = #{companyName}
            </if>
            <if test="ordered != null ">
                ordered = #{ordered}
            </if>
            <if test="description != null and description != '' ">
                description = #{description}
            </if>
            <if test="status != null ">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>

    <!--    根据id删除字段-->
    <delete id="delOneById">
        delete
        from tb_brand
        where id = #{id};
    </delete>

    <!--    根据id数组批量删除字段-->
    <!--    mybatis会将数组封装成map集合，
    默认key值是array array = 数组
    可以设置注解指定名称-->
    <delete id="delManyByIds">
        delete from tb_brand
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

</mapper>